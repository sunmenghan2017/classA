{"version":3,"sources":["ShowTime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoinput","handleChange","e","setState","target","name","parseInt","value","handleInput","keyCode","props","add","bind","state","a","b","c","this","focus","ref","inp","onChange","onKeyDown","type","onClick","console","log","Todoing","todo","map","item","idx","key","delete","defaultProps","Todolist","addItem","data","deleteItem","splice","obj","ReactDOM","render","document","getElementById","className"],"mappings":"iPAEuBA,Y,qBCCFC,E,YACjB,aAAe,IAAD,8BACV,+CAQJC,aAAa,SAACC,GACV,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAMC,SAA0B,KAAjBJ,EAAEE,OAAOG,MAAW,EAAEL,EAAEE,OAAOG,UAXlD,EAcdC,YAAc,SAACN,GAEI,KAAZA,EAAEO,SAED,EAAKC,MAAMC,IAAIT,EAAEE,OAAOG,QAhB5B,EAAKC,YAAc,EAAKA,YAAYI,KAAjB,gBACnB,EAAKC,MAAM,CACPC,EAAE,GACFC,EAAE,GACFC,EAAE,IANI,E,iFAsBVC,KAAKH,EAAEI,U,+BAED,IAAD,OACL,OACI,6BAQI,2BAAOC,IAAK,SAACC,GAAO,EAAKN,EAAEM,GAAMC,SAAUJ,KAAKhB,aAAcM,MAAOU,KAAKJ,MAAMC,EAAGQ,UAAWL,KAAKT,YAAae,KAAK,SARzH,IAUI,2BAAOlB,KAAK,IAAIgB,SAAUJ,KAAKhB,aAAcM,MAAOU,KAAKJ,MAAME,EAAGO,UAAWL,KAAKT,YAAae,KAAK,SAVxG,IAYI,2BAAOlB,KAAK,IAAIgB,SAAUJ,KAAKhB,aAAcM,MAAOU,KAAKJ,MAAMG,EAAGM,UAAWL,KAAKT,YAAae,KAAK,SAZxG,IAcI,2BAAIN,KAAKJ,MAAMC,EAAEG,KAAKJ,MAAME,EAAEE,KAAKJ,MAAMG,GAEzC,2BAAOG,IAAK,SAACC,GAAO,EAAKA,IAAIA,GAAMG,KAAK,SACxC,4BAAQC,QAAS,WAAKC,QAAQC,IAAI,EAAKN,IAAIb,SAA3C,qB,GA5CuBR,aCDlB4B,E,iLAMP,IAAD,OACAC,EAAMX,KAAKP,MAAXkB,KACL,OACI,6BACI,4BAEQA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OACL,wBAAIC,IAAKD,GACJD,EADL,MACa,4BAAQN,QAAS,SAACtB,GAAD,OAAK,EAAKQ,MAAMuB,OAAOF,EAAI7B,KAA5C,0B,GAdJH,aA4BrC4B,EAAQO,aAAa,CACjBN,KAAK,CAAC,EAAE,EAAE,I,IC5BOO,E,YACjB,aAAc,IAAD,uBACT,+CAqBJC,QAAQ,SAACC,GACL,EAAKlC,SAAS,CACVyB,KAAK,GAAD,mBAAK,EAAKf,MAAMe,MAAhB,CAAqBS,IAClCA,KAAK,KAEAZ,QAAQC,IAAI,EAAKb,MAAMe,OA3Bd,EA6BbU,WAAa,SAACP,EAAI7B,GAGduB,QAAQC,IAAIxB,GACZ,IAAI0B,EAAI,YAAO,EAAKf,MAAMe,MAC1BA,EAAKW,OAAOR,EAAI,GAQhB,EAAK5B,UAAS,SAACU,EAAMH,GAEjB,OADAe,QAAQC,IAAIb,EAAMe,MACZ,CACFA,KAAKA,OA3Cb,EAAKf,MAAQ,CACTwB,KAAK,GACLT,KAAK,CAAC,EAAE,EAAE,IAGd,IAAIY,EAAI,CAAC1B,EAAE,IAAIC,EAAE,CAAC,EAAE,EAAE,IAPb,OAQHyB,EAAM1B,EAAE,IAAKW,QAAQC,IAAIc,GARtB,E,sEAmDT,OACI,6BACI,kBAAC,EAAD,CAAW7B,IAAKM,KAAKmB,UACrB,kBAAC,EAAD,CAASR,KAAMX,KAAKJ,MAAMe,KAAMK,OAAQhB,KAAKqB,kB,GAvDvBvC,aCKtC0C,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SA4KpBD,SAASC,eAAe,QAI5BC,UAAU,W","file":"static/js/main.ebeec341.chunk.js","sourcesContent":["import React,{Fragment,Component}from 'react';\r\n\r\nclass ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time: new Date().toLocaleString(),\r\n            a:100,\r\n            b:200\r\n        }\r\n        console.log('constructor',props);\r\n    }\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n        setInterval(() => {\r\n            this.setState({\r\n                time: new Date().toLocaleString() \r\n            })\r\n        }, 1000);\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log('didupdate');\r\n        console.log(preState);\r\n        console.log(this.state.time);\r\n    }  \r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getsnapshot');\r\n        return {name:this.state.a};\r\n    }\r\n    \r\n    render(){\r\n        console.log('render');\r\n        var {name,age,pp}=this.props;\r\n        return(\r\n            <Fragment>\r\n                <div>{this.state.time}</div>\r\n                \r\n                {/* 条件渲染 */}\r\n                {name.length>5?<div>姓名：{name}</div>:''}  {/*if.....else */}\r\n                {name.length>5&&<div>姓名：{name}</div>}    {/*if*/}\r\n\r\n                <div>年龄：{age}</div>\r\n                {/*循环渲染 */}\r\n                <div>\r\n                    {\r\n                        pp.map((item,index)=>{\r\n                            if(index%2===0){\r\n                                return <p key={index}>{item}</p>;\r\n                            } \r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n//默认导出：只能导出一次，被引入是可以重命名\r\nexport default ShowTime;//不写default时，在引入的文件中要写import {ShowTime} from './ShowTime.js'\r\n\r\n//命名导出：可以导出多个\r\n//export {ShowTime};//即不写default\r\n//export const num=100;\r\n//export const num1=100;","import React, { Component } from 'react'\r\n//受控组件，value值被react控制的表单元素\r\n//可以实时获取表单元素的值（表单验证）/写法相对麻烦\r\nexport default class Todoinput extends Component {\r\n    constructor( ){ \r\n        super(); \r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state={\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }//箭头函数不需bind\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    handleInput = (e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或bind\r\n        if(e.keyCode===13){\r\n            // console.log(e.target.value);\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.a.focus();//页面加载后第一个input获得焦点\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/*受控组件 <input name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\" />\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\" />\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\" />\r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p> */}\r\n                <input ref={(inp)=>{this.a=inp}} onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\" />\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\" />\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\" />\r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                {/* 非受控组件:一次性获取或处理表单元素的值 */}\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\" />\r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//受控组件：\r\n//1.给input标签添加value属性，赋值为state的值\r\n//2.绑定onChange事件，在事件处理函数中setState\r\n//3.一个事件处理函数控制多个表单时，给input添加name属性，事件处理函数重谢：setState({[e.target.name]:e.target.value})","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport default class Todoing extends Component {\r\n    // delItem(idx,e){\r\n    //     this.props.del(idx);//则button 内可写成onClick={this.props.del.bind(idx,e)}\r\n    //     console.log(e);\r\n        \r\n    // }\r\n    render() {\r\n        var {todo}=this.props;\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {\r\n                        todo.map((item,idx)=>\r\n                            <li key={idx}>\r\n                                {item}---<button onClick={(e)=>this.props.delete(idx,e)}>删除</button>\r\n                            </li>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//类型检查\r\nTodoing.propTypes={\r\n    todo:PropTypes.array,\r\n    delte:PropTypes.func\r\n}\r\nTodoing.defaultProps={\r\n    todo:[1,2,3]\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data:'',\r\n            todo:[1,2,3]\r\n        };\r\n        //深拷贝/浅拷贝\r\n        var obj={a:100,b:[1,2,3]};\r\n        var o=obj;o.a=200; console.log(obj);\r\n        //var o1={...obj};o.b[0]=200;console.log(obj);浅拷贝\r\n        //var o =JSON.parse(JSON.stringify(obj));o.a=200;深拷贝;\r\n        //var obj1={c:300};var o=Object.assign(obj,obj1);console.log(o===obj);//true\r\n        //var obj1={c:300};var o=Object.assign({},obj,obj1);console.log(o===obj);//false,浅拷贝\r\n\r\n        //遍历\r\n        /*console.log(Object.keys(obj).forEach((item)=>{\r\n                console.log(item);\r\n                console.log(obj[item]);\r\n                \r\n        }));\r\n        */\r\n    }\r\n    addItem=(data)=>{\r\n        this.setState({\r\n            todo:[...this.state.todo,data],\r\n\t\t\tdata:''\r\n        });\r\n        console.log(this.state.todo);\r\n    }\r\n    deleteItem = (idx,e)=>{\r\n        //1.不能直接处理state，通过setState改变\r\n        //2.setState是异步执行的\r\n        console.log(e);\r\n        let todo = [...this.state.todo];\r\n        todo.splice(idx,1);\r\n        // this.setState({\r\n        // \ttodo:this.state.num+100\r\n        // },()=>{\r\n        //     console.log(this.state.todo);\r\n        // })\r\n        //在setState例获取state可能会出错，不是你想要的值\r\n        //可以把第一个参数写成函数，解决这个问题，如下\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);\r\n            return{\r\n                todo:todo\r\n            }  \r\n        })\r\n         \r\n    }\r\n\trender() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem} />\r\n                <Todoing todo={this.state.todo} delete={this.deleteItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React,{Fragment,Component}from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ShowTime from './ShowTime.js';\nimport Todolist from './Todolist/Todolist';\n\n//组件交互\n//父组件---->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\nReactDOM.render(\n    <Todolist/>,\n    document.getElementById('root')\n)\n\n\n// /**与ShowTime 结合 */\n// var item=[1,2,3,4,5];\n// var num=100;\n// ReactDOM.render(<ShowTime pp={item} name=\"zhangsan\" age={num}/>,document.querySelector('#root'));\n\n\n//组件定义方式\n// ①类定义组件\n/*class Hello extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            time: new Date().toLocaleString()\n        }\n        \n        console.log('constructor',this.props.word);\n    }\n    componentDidMount(){\n        console.log('componentDidMount');\n        setTimeout(()=>{\n            console.log(1)\n            this.setState({\n                time: new Date().toLocaleString()\n            })\n        },1000)\n    }\n    shouldComponentUpdate(){\n        return true;\n    }\n    getSnapshotBeforeUpdate(){\n        console.log('getsnapshot');\n    }\n    componentDidUpdate(){\n        console.log('didupdate');\n        \n    }\n    render(){\n        console.log('render');\n        return (\n            <Fragment>\n                <div>{this.state.time}</div>\n                <div>hello{this.props.word}</div>\n            </Fragment>\n        );\n    }\n}\nReactDOM.render(<Hello word=\"react\"/>,document.getElementById('root'));\n*/\n// // ②函数定义组件（无生命周期函数）\n// //当只是渲染结构时\n// function Todo(props){\n//     return (\n//         <div>\n//             {/* 条件渲染 */}\n//             {props.list.length>=6?<h1>todo</h1>:''}\n//             {props.list.length>=5 && <h1>todo</h1>}\n//             <ul>\n//                 {/* 循环渲染 */}\n//                 {\n//                     props.list.map(\n//                         (item,index)=> index%2 === 0&&<li key={item}>{item}</li>\n//                     )\n//                 }\n//             </ul>\n//         </div>\n//     )\n// }\n// var item = [1,2,3,4,5];\n// ReactDOM.render(<Todo list={item}/>,document.getElementById('root'));\n\n\n\n// function ShowTime(props){\n//     console.log(props);\n//     return (\n//         <Fragment>\n//             <div>{props.name}{props.age}</div>\n//             <div>{new Date().toLocaleString()}</div>\n//         </Fragment>\n//         );\n// }\n// var num=100;\n// ReactDOM.render(<ShowTime age={num} name=\"zhangsan\"/>,document.querySelector('#root'));\n\n// //显示当前系统时间\n// function showTime(){\n//     var ele=<div>\n//             <p>当前时间：</p>\n//             <div>{new Date().toLocaleString()}</div>\n//         </div>;\n//     ReactDOM.render(ele,document.getElementById('root'));\n// }\n// showTime();\n// setInterval(showTime,1000);\n\n\n// var obj = {\n//     type: 'div',\n//     props: {\n//         id: 'box',\n//         class: 'box',\n//         children: [\n//             'hello',\n//             'react',\n//             {\n//                 type: 'h1',\n//                 props: {\n//                     id: 'tit',\n//                     class: 'tit',\n//                     children: [\n//                         'title',\n//                         'react'\n//                     ]\n//                 }\n//             }\n//         ]\n//     }\n// }\n// function render(obj,container){\n//     var {type,props} = obj;\n//     //文档碎片\n//     var fragment=document.createDocumentFragment();\n\n//     var ele = document.createElement(type);\n//     for(var item in props){\n//         if(item === 'class'){\n//             ele.className = props[item]\n//         }else if(item === 'children'){\n//             for(var i=0;i<props.children.length;i++){\n//                 // ele.innerHTML += props.children[i];\n//                 if(typeof props.children[i] === 'object'){\n//                     render(props.children[i],ele);\n//                 }else{\n//                     var txt = document.createTextNode(props.children[i]);\n//                     ele.appendChild(txt);\n//                 }\n//             }\n//         }else{\n//             ele[item] = props[item];\n//         }\n//     }\n//     fragment.appendChild(ele);\n//     container.appendChild(fragment);\n// }\n// //render(obj,document.getElementById('root'));\n\n\n// // 注意以下性能问题及优化方法\n\n// /**\n// *页面渲染过程：\n// *请求HTML页面，浏览器HTML解析器解析html文件、生成DOM树\n// *link引入css文件、CSS解析器解析css， 生成css对象模型，CSSOM和DOM tree结合生成render tree，浏览器渲染引擎渲染render tree（link加载css文件、解析css规则、和DOM树结合生成render tree、浏览器渲染引擎渲染render tree）\n// */\n\n\n// //页面回流（重排reflow）:DOM结构发生变化、内容变化、大小、位置变化\n// //页面重绘（repaint）:颜色的变化（背景色、字体颜色、边框颜色）\n// //1.先用变量进行DOM处理，最后一次渲染\n// // console.time('time');\n// // var div=document.getElementById('root');\n// // var str=\"\";\n// // for(var i=0;i<1000;i++){\n// //     str+=\"<p>\"+i+\"</p>\";\n// // }\n// // div.innerHTML=str;\n// // console.timeEnd('time');\n// //2.对于样式处理\nvar div=document.getElementById('root');\n// div.style.width='100px';\n// div.style.height='100px';\n// div.style.background='red';\ndiv.className='active';\n// //3.node.offsetLeft、node.offsetWidth等慎用,会引起回流\n// console.log(div.offsetWidth)\n// var width = div.offsetWidth;\n// setInterval(()=>{\n//     width += 1\n//     div.style.width = width + 'px';\n// },100)\n// //4.文档碎片的概念（内存中的一个变量）\n\n\n\n\n\n\n\n\n\n\n////////////////////////////\n\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n"],"sourceRoot":""}